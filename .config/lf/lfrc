set shell sh
set shellopts '-eu'
set scrolloff 10
set ifs "\n"
set cursorpreviewfmt "\033[7;90m"

set icons true
set ignorecase true
set drawbox

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f
map r
map y
map t

# Custom Functions
# Change window title
cmd on-cd &{{
    printf "\033]0; lf:$(pwd | sed "s|$HOME|~|")\007" > /dev/tty
}}
on-cd # also run at startup

cmd trash ${{
    set -f
    if gio trash 2>/dev/null; then
        gio trash $fx
    else
        mkdir -p ~/.trash
        mv --force $fx ~/.trash
    fi
}}

cmd delete ${{
    clear
    set -f
    printf "$fx\n"
    printf "delete?[y/n] "
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

cmd open ${{
    case $f in
        *.epub|*.fb2) epy $f ;;
        *.pdf|*.djvu) setsid -f zathura $fx >/dev/null 2>&1 ;;
        *)
          case $(file --mime-type "$f" -bL) in
            text/*|application/json|inode/x-empty) nvim "$f" ;;
            audio/*|video/x-ms-asf) mpv --audio-display=no -quiet $f ;;
            video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
            image/*) feh -F $f ;;
          esac ;;
    esac
}} # *) setsid -f xdg-open "$f" >/dev/null 2>&1;;


cmd share $curl -F"file=@$fx" https://0x0.st | xclip -selection c

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}

cmd select-all :unselect; invert

cmd convert ${{
  case "$f" in
      *.HEIC|*.heic) heif-convert "$f" "${f%.*}.jpg" ;;
      *.WEBP|*.webp) mogrify -format png "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd newfold ${{
    set -f
    printf "Directory name: "
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

cmd copyname ${{
  filename="${f##*/}"
  ls $filename | xclip -selection clipboard
}}

cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-name &basename -a -- $fx | rev | cut -d. -f2- | rev | head -c-1 | xclip -i -selection clipboard

cmd metadata ${{
  clear; exiftool $f
	read -p "Press enter to continue"
}}

# Move file, use FZF
cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(find ~/ /mnt/ -type d | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

# show the result of execution of previous commands
map ` !true

# Arrows
map u up
map e down
map n updir
map i open

map U top
map E bottom
map <c-u> :updir; set dironly true; up; open; set dironly false
map <c-e> :updir; set dironly true; down; open; set dironly false

map <enter> open

# Basic
map DD delete
map dd trash
map <delete> trash
map p paste
map P :link
map xx cut
map xd newfold
map mt moveto
map yy copy
map yn yank-name
map yp yank-path

# Selection
map l unselect
map L invert
map c clear
map <c-a> select-all

# View options
map . set hidden!
map R reload

# Rename
map re :rename; cmd-end   # at the very end
map rc push re<c-u>       # new rename
map rs :rename; cmd-home  # at the very beginning
map rr :rename            # before extension
map rE :rename; cmd-right # after extension

# Creation and modification
map mf push %touch<space>
map md push %mkdir<space>
map CH chmod

# Go to
map gd cd ~/Downloads
map gh cd ~/
map go cd ~/Obsidian\ Vault/
map gg cd ~/Git

map gL follow_link # Follow symlinks

# Extra
map zc convert
map zs share
map zu extract
map za zip
map zm metadata